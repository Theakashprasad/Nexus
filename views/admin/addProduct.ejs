<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product</title>
  <!-- Add Tailwind CSS CDN link here -->
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
  <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/cropper/2.3.4/cropper.min.css'>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .container {
      width: 70%;
    }


    body{
    position: relative;
}

/* user side image previewer */

#imagePreview img{
    height: 50px;
    max-width: 80px;
}

#cropper110Modal{
    position: absolute;
    width: 100vw;
    height: 100vh;
    background-color: rgba(53, 52, 52, 0.532);
    display: flex;
    justify-content: center;
    align-items: center;
    display: none;
}

#cropper110Modal img {
	max-width: 100%;
}

.cropper110-page {
	margin: 1em auto;
	max-width: 768px;
	height: 100%;
}

.cropper110-box {
	padding: 0.5em;
	width: calc(100%/2 - 1em);
    max-height: 60vh;
}



.cropper110-crop , .cropper110-close {
    padding: .5rem 1rem;
    background-color: rgb(0,0,0);
    color: #fff;
    font-weight: bold;
}

.cropper110-close{
    background-color: red;
}





  </style>
</head>

<body class="bg-gray-100">
  <div class="container mx-auto p-10">
    <h1 class="text-2xl font-semibold mb-4">ADD PRODUCT</h1>
    <a href="/admin/product"class="absolute top-10 right-60 text-gray-400 hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8  flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white close-coupon-Box-edit">
      <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
      </svg>
    </a>
    
    <form class="bg-white shadow-md rounded-lg px-8 pt-6 pb-8 mb-4" action="addProductPost"
      method="post" enctype="multipart/form-data" oninput="return v()">
       <p class="text-red-400"><%=message%></p>
      <!-- product Name -->
      <div class="mb-4">
        <label for="" class="block text-gray-700 text-sm font-bold mb-2">Product Name</label>
        <input oninput="nameValidation()" type="text" id="productName" name="productName"
          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          required>
      </div>
      <p class="text-red-400" id="NameError"></p>

         <!-- Description  -->
         <div class="mb-4">
          <label  class="block text-gray-700 text-sm font-bold mb-2">Description</label>
          <input id="dicrp" type="text" name="description" oninput="discValidation()"   
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required>
        </div>
        <p class="text-red-400" id="dicripError"></p>
           <!-- Category  -->
           <div class="mb-4">
            <label for="category" class="block text-gray-700 text-sm font-bold mb-2">Category</label>
            <select id="category" name="category"
              class="shadow appearance-none border  rounded w-full py-2 px-3 text-gray-a700 leading-tight focus:outline-none focus:shadow-outline"
              required >
              <!-- show  all the category in this product list   using foreach method  -->
              <% displayCategory.forEach((list, index)=> { %>
                <option value="<%= list.product_category %>">
                  <%= list.product_category %>
                </option>
                <% }) %>
            </select>
          </div>

         <!--  Price -->
         <div class="mb-4">
          <label for="" class="block text-gray-700 text-sm font-bold mb-2">Price</label>
          <input oninput="priceValidation()" type="number" id="price" name="price"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required>
        </div>
        <p class="text-red-400" id="PriceError"></p>

      <!-- Quantity -->
      <div class="mb-4">
        <label for="categoryDescription" class="block text-gray-700 text-sm font-bold mb-2">Quantity</label>
        <input oninput="qantityValidation()" type="text" id="quantity" name="quantity1" placeholder="SIZE 6"
          class="shadow appearance-none border rounded  py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
         ></input>
         <input oninput="qantityValidation()" type="text" id="quantity" name="quantity2"  placeholder="SIZE 7"
         class="shadow appearance-none border rounded  py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
        ></input> 
        <input oninput="qantityValidation()" type="text" id="quantity" name="quantity3"  placeholder="SIZE 8"
        class="shadow appearance-none border rounded  py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
       ></input>
       <input oninput="qantityValidation()" type="text" id="quantity" name="quantity4"  placeholder="SIZE 9"
       class="shadow appearance-none border rounded  py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
      ></input>
      </div>
      <p class="text-red-400" id="quantityError"></p>


   <!-- brand -->
   <div class="mb-4">
    <label for="" class="block text-gray-700 text-sm font-bold mb-2">Brand</label>
    <input type="text" id="brand" name="brand" oninput="brandValidation()"
      class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
      required>
  </div>
  <p class="text-red-400" id="brandError"></p>
        
  
    <!-- cropper modal -->
    <div id="cropper110Modal">
      <div id="imageCropBox">
          <div style="text-align: end;">
              <button class="cropper110-close">close</button>
          </div>
          <section class="cropper110-page">
              <div class="cropper110-box">
                  <div class="cropper110-cropping-box"></div>
              </div>

              <div>
                  <button class="cropper110-crop mx-3">Crop</button>
              </div>
          </section>
      </div>
  </div>
  <!-- /cropper modal/  -->


  <section>
    
          <label for="fileUploader"></label>
          <input type="file" id="fileUploader"  name="image" data-image-preview="#imagePreview" accept=".jpg,.png,.jpeg" multiple>
          <div id="imagePreview"></div>
 
  </section>

      <div class="flex items-center justify-between">
        <button type="submit"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
          save
        </button>
        <p class="text-red-400" id="filleroor"></p>

      </div>
    </form>
  </div>

  <script>
    function v(){
      productName = document.getElementById("productName").value.trim();
      discription = document.getElementById("dicrp").value.trim();
      NameError = document.getElementById("filleroor");

      if(productName ==='' ||  discription === ''){
        console.log('uwyedyghjsw');
        NameError.innerText = "Please fill all the fields";
      return false;
    }
     return nameValidation() && qantityValidation() && priceValidation() && discValidation()
    }
  
             function nameValidation(){
               productName = document.getElementById("productName").value.trim();
               NameError = document.getElementById("NameError");
               const onlyLettersRegex = /^[a-zA-Z\s]+$/; 
               if(productName==""){
                 NameError.innerText = "Can not add spaces";
                return false
              }else if (!onlyLettersRegex.test(productName)) {
                NameError.innerText = "Name can only contain letters";
                      return false; // Indicate validation failure  
              } else {
                NameError.innerText = ""; // Clear error message
          return true; // Indicate validation success
      }
              } 
              

              function discValidation(){
                console.log('dicriop');
               discription = document.getElementById("dicrp").value.trim();
               dicripError = document.getElementById("dicripError");
               const onlyLettersRegex = /^[a-zA-Z\s]+$/; 

               if(discription==""){
                dicripError.innerText = "Can not add spaces";
                return false
              } else if (!onlyLettersRegex.test(discription)) {
                dicripError.innerText = "Name can only contain letters";
                      return false; // Indicate validation failure    
              }
               else {
                dicripError.innerText = ""; // Clear error message
          return true; // Indicate validation success
      }
              }



  
           function qantityValidation(){
          const quantity = document.getElementById("quantity").value;
          const quantityError = document.getElementById("quantityError")
          if(quantity<0){
            quantityError.innerText = "quantity should not be less than 0"
            return false
          }else if(isNaN(quantity)){
            quantityError.innerText = "should be number"
        }else{
            quantityError.innerText = " "
            return true; 
          }
              }
  
             function priceValidation(){
              const price = document.getElementById("price").value;
              const PriceError = document.getElementById("PriceError");
              if(price<0){
                PriceError.innerText = "price should not be less than 0"
            return false
              }else{
            PriceError.innerText = ""
            return true; 
          }        
           }


           function brandValidation(){
               productName = document.getElementById("brand").value.trim();
               NameError = document.getElementById("brandError");
               const onlyLettersRegex = /^[a-zA-Z\s]+$/; 
               if(productName==""){
                 NameError.innerText = "Can not add spaces";
                return false
              }else if (!onlyLettersRegex.test(productName)) {
                NameError.innerText = "Name can only contain letters";
        return false; // Indicate validation failure  
              } else {
                NameError.innerText = ""; // Clear error message
          return true; // Indicate validation success
      }
              } 



    </script>
 <script src='https://cdnjs.cloudflare.com/ajax/libs/cropperjs/0.8.1/cropper.min.js'></script>
<script>
  let fileInputs = document.querySelectorAll('[data-image-preview]')


let croppingBox = document.querySelector('.cropper110-cropping-box'),
    crop = document.querySelector('.cropper110-crop'),
    cropper = '',
    currentInput = null,
    imgNames = null,
    imgSrc = null;

fileInputs.forEach(fileInput => {
    fileInput.addEventListener('change', () => {
        let previewDiv = document.querySelector(fileInput.dataset.imagePreview)
        previewDiv.innerHTML = ""
        for (let each of fileInput.files) {
            let imgSrc = URL.createObjectURL(each)
            let img = document.createElement('img')
            img.src = imgSrc
            img.dataset.fileName = each.name
            img.dataset.input = fileInput.id
            img.addEventListener('click', cropImage)

            previewDiv.append(img)

        }
    })
})


function cropImage(e) {
    
    document.getElementById('cropper110Modal').style.display = 'flex'

    let img = document.createElement('img');
    img.id = 'image';
    img.src = e.target.src;
    croppingBox.innerHTML = '';
    croppingBox.appendChild(img);
    cropper = new Cropper(img);

    imgNames = e.target.dataset.fileName
    currentInput = e.target.dataset.input

}



//crop and save on click
crop.addEventListener('click', e => {
    e.preventDefault();
    // get result to data uri

    let imgSrc = cropper.getCroppedCanvas({
        width: 300 // input value
    }).toDataURL();

    if (imgSrc && imgNames !== null) {
        let fileUploader = document.getElementById(currentInput)
        fetch(imgSrc)
            .then(res => res.blob())
            .then(blob => {
                let file = new File([blob], `${imgNames}-${Date.now()}.png`, { type: "image/jpeg" })

                const dt = new DataTransfer()
                for (let each of fileUploader.files) {
                    if (each.name !== imgNames) {
                        dt.items.add(each)
                    } else {
                        dt.items.add(file)
                    }
                }


                fileUploader.files = dt.files


                let previewDiv = document.querySelector(fileUploader.dataset.imagePreview)
                previewDiv.innerHTML = ""
                let res = ""

                for (let each of fileUploader.files) {
                    let src = URL.createObjectURL(each)
                    res += `<img src="${src}" data-file-name="${each.name}" data-input="${fileUploader.id}" onclick="cropImage(event)" class="previewImages">`
                }

                previewDiv.innerHTML = res


            })
    }

    document.querySelector('.cropper110-close').click()
});

document.querySelector('.cropper110-close')
    .addEventListener('click', () => {
        document.getElementById('cropper110Modal').style.display = 'none'
    })
</script>

</body>
</html>
